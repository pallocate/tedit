#!/bin/sh

cd /home/projects/pen/pen

###  Print usage  ###
printUsage () {
   echo "Usage: pen task [option]"
   echo
   echo "Tasks:"
   echo "all            linux          utils"
   echo "wasm           api"
}

task="jvm"
if [ $1 ]; then
   task=$1
fi

###  JVM  ###
if [ $task = "jvm" ]; then
   DEPENDENCIES=$SERIAL_RUN:$COROUTINES:$APACHE_COMMON:$IROHA_ED25519:$JNA
   cmd-timed "kotlinc -d build/dist/platform/jvm/pen/pen.jar -cp $DEPENDENCIES -Xmulti-platform -Xplugin=$SERIAL_PLUG src/commonMain src/jvmMain"

###  Wasm  ###
elif [ $task = "wasm" ]; then
   if [ $2 -a $2 = "serv" ]; then
      cd build/dist/platform/wasm32
      python -m RangeHTTPServer

   else
      echo Compiling..
      cmd-timed "kotlinc-native -o pen -target wasm32 -Xmulti-platform src/commonMain src/native_serializtion_hack"
      mv pen.wasm pen.wasm.js build/dist/platform/wasm32
# -g -generate debug DWARF information usaful to the GDB

   fi

###  Linux  ###
elif [ $1 = "linux" ]; then
   echo Compiling..

   if [ $2 -a $2 = "sodium" ]; then
      echo Making sodium.klib
      cinterop -def src/linux_x64Main/sodium.def -compiler-option -I/usr/include -o sodium
      rm -Rf sodium-build

   else
      SOURCES="src/commonMain src/native_serializtion_hack src/linux_x64Main"
      kotlinc-native -target linux_x64 -o linux-tests -Xmulti-platform $SOURCES -library sodium -linker-options "-L/usr/lib -lsodium"

      if [ $? -eq 0 ]; then
         mv linux-tests.kexe sodium.klib build/dist/platform/linux_x64Main
         cd build/dist/platform/linux_x64Main

         echo Running..
         ./linux-tests.kexe

      fi
   fi

###  Utils  ###
elif [ $task = "utils" ]; then
   DEPENDENCIES=$JUNIT:$PEN:$IRC:$JNA:$SERIAL_RUN:$JNA
   kotlinc -d build/dist/platform/jvm/pen/utils.jar -cp $DEPENDENCIES -Xmulti-platform src/commonUtils

###  Api  ###
elif [ $task = "docs" ]; then
   clear
   echo "Building docs.." ; echo
   java -cp $STDLIB -jar $DOKKA src/commonMain src/jvmMain -output build/docs/pen/api

else
   printUsage

fi
echo
#kotlinc -nowarn  # Silent compile
